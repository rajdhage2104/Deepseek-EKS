name: CI-CD workflow for Deepseek

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Choose action (apply/destroy)"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy

permissions:
  id-token: write
  contents: read

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
  
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # Build trust between GitHub and AWS using OIDC 
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
            role-to-assume: ${{ secrets.AWS_IAM_ARN }}
            role-session-name: samplesession
            aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform init 
        run: cd Terraform && terraform init

      - name: Terraform Validate 
        run: cd Terraform && terraform validate
            

  apply:
    runs-on: ubuntu-latest
    needs: setup
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') ||
      (github.event_name == 'push' && !contains(github.event.head_commit.message, 'destroy'))
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
  
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
  
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
            role-to-assume: ${{ secrets.AWS_IAM_ARN }}
            role-session-name: samplesession
            aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: cd Terraform && terraform init

      - name: Terraform Plan
        run: cd Terraform && terraform plan -out=tfplan 

      - name: Terraform Apply
        run: cd Terraform && terraform apply -auto-approve 
            
  post_apply:
    runs-on: ubuntu-latest
    needs: apply
    if: success()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
  
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
  
      # Build trust between GitHub and AWS using OIDC connector
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ARN }}
          role-session-name: samplerolesession
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: Terraform
        run: terraform init
            
      - name: Retrieve Terraform Outputs
        working-directory: Terraform
        id: tf_outputs
        run: |
          echo "Retrieving Terraform Outputs..."
          echo "INSTANCE_PUBLIC_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV

      - name: Update kube config
        run: aws eks update-kubeconfig --name deepseek-cluster --region us-east-1

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/deepseek -n deepseek
          echo "Deployment successful"

      - name: Get Service URL
        run: |
          echo "Waiting for LoadBalancer to be ready..."
          sleep 30
          kubectl get service deepseek -n deepseek
          SERVICE_URL=$(kubectl get service deepseek -n deepseek -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "Service is available at: http://$SERVICE_URL"

  destroy:
    runs-on: ubuntu-latest
    needs: setup
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy') ||
      (github.event_name == 'push' && !contains(github.event.head_commit.message, 'destroy'))
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
  
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
  
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
            role-to-assume: ${{ secrets.AWS_IAM_ARN }}
            role-session-name: samplesession
            aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        run: cd Terraform && terraform init

      - name: Terraform Destroy
        run: cd Terraform && terraform destroy --auto-approve
