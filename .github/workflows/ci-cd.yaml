name: CI-CD workflow for Deepseek

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Choose action (apply/destroy)"
        required: true
        default: "apply"
        type: choice
        options:
          - apply
          - destroy

permissions:
  id-token: write
  contents: read

jobs:
    setup:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Code
          uses: actions/checkout@v4
  
        - name: Set up Terraform
          uses: hashicorp/setup-terraform@v3

        # Build trust between GitHub and AWS using OIDC connector
        - name: configure aws credentials
          uses: aws-actions/configure-aws-credentials@v3
          with:
              role-to-assume: ${{ secrets.AWS_IAM_ARN }}
              role-session-name: samplesession
              aws-region: ${{ secrets.AWS_REGION }}

        - name: Terraform init 
          run: cd Terraform && terraform init

        - name: Terraform Validate 
          run: cd Terraform && terraform validate
            

    apply:
      runs-on: ubuntu-latest
      needs: setup
      if: |
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') ||
        (github.event_name == 'push' && !contains(github.event.head_commit.message, 'destroy'))
      steps:
        - name: Checkout Code
          uses: actions/checkout@v4
  
        - name: Set up Terraform
          uses: hashicorp/setup-terraform@v3
  
        - name: configure aws credentials
          uses: aws-actions/configure-aws-credentials@v3
          with:
              role-to-assume: ${{ secrets.AWS_IAM_ARN }}
              role-session-name: samplesession
              aws-region: ${{ secrets.AWS_REGION }}

        - name: Terraform Init
          run: cd Terraform && terraform init

        - name: Terraform Plan
          run: cd Terraform && terraform plan -out=tfplan 

        - name: Terraform Apply
          run: cd Terraform && terraform apply -auto-approve 
            
    post_apply:
      runs-on: ubuntu-latest
      needs: apply
      if: success()
      steps:
        - name: Checkout Code
          uses: actions/checkout@v4
  
        - name: Set up Terraform
          uses: hashicorp/setup-terraform@v3
  
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
  
        - name: Retrieve Terraform Outputs
          id: tf_outputs
          run: |
            echo "Retrieving Terraform Outputs..."
            echo "INSTANCE_PUBLIC_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV
  
        - name: Add GitHub Runner IP to Security Group
          run: |
            RUNNER_IP=$(curl -s https://checkip.amazonaws.com)
            echo "Runner IP: $RUNNER_IP"
            aws ec2 authorize-security-group-ingress \
              --group-id "${{ env.SECURITY_GROUP_ID }}" \
              --protocol tcp \
              --port 22 \
              --cidr "$RUNNER_IP/32" || echo "Failed to add rule to EC2 Security Group"

        - name: Wait for Security Group to Update
          run: sleep 12

        # Create known_hosts file inside SSH directory 
        - name: Create SSH directory and known_hosts file
          run: |
            mkdir -p ~/.ssh
            touch ~/.ssh/known_hosts

        # Add private key to id_rsa
        - name: Extract SSH private key    
          run: echo "${{ secrets.PRIVATE_SSH_KEY }}" > ~/.ssh/id_rsa
          shell: bash

        # Grant read-write permission to id_rsa 
        - name: Set proper permissions for the private key   
          run: chmod 600 ~/.ssh/id_rsa

        # Install SSH Client
        - name: Install SSH Client    
          run: sudo apt-get install -y openssh-client
          
        # Build trust between GitHub and AWS using OIDC connector
        - name: configure aws credentials
          uses: aws-actions/configure-aws-credentials@v3
          with:
            role-to-assume: ${{ secrets.AWS_IAM_ARN }}
            role-session-name: samplerolesession
            aws-region: ${{ secrets.AWS_REGION }}
          
        # Pulling image from ECR and deploying on EC2 which contains docker
        - name: Deploy DeeEC2 with Docker   # In this step we are deploying our application on EC2 instance
          run: |
            ssh-keyscan -H ${{ secrets.INSTANCE_PUBLIC_IP }} >> ~/.ssh/known_hosts
            ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.INSTANCE_PUBLIC_IP }} '
              
              docker run -d --gpus=all -v ollama:/root/.ollama -p 11434:11434 --name ollama --restart always ollama/ollama
              sleep 120
              
              docker exec ollama ollama run deepseek-r1:7b
              docker exec ollama ollama run deepseek-r1:14b
              
              docker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main
            '


    destroy:
      runs-on: ubuntu-latest
      needs: setup
      if: |
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply') ||
        (github.event_name == 'push' && !contains(github.event.head_commit.message, 'destroy'))
      steps:
        - name: Checkout Code
          uses: actions/checkout@v4
  
        - name: Set up Terraform
          uses: hashicorp/setup-terraform@v3
  
        - name: configure aws credentials
          uses: aws-actions/configure-aws-credentials@v3
          with:
              role-to-assume: ${{ secrets.AWS_IAM_ARN }}
              role-session-name: samplesession
              aws-region: ${{ secrets.AWS_REGION }}

        - name: Terraform Init
          run: cd Terraform && terraform init

        - name: Terraform Plan
          run: cd Terraform && terraform destroy --auto-approve

